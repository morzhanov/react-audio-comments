(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'react'], factory) :
  (factory((global['react-media-editor'] = {}),global.lodash,global.React));
}(this, (function (exports,lodash,React) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var VideoPlayer = function VideoPlayer(canvas, _ctx, _media, _ratio, drawCallback) {
    var _this = this;

    _classCallCheck(this, VideoPlayer);

    _defineProperty(this, "drawVideo", function (force) {
      var media = _this.media,
          ctx = _this.ctx,
          ratio = _this.ratio;
      var width = _this.canvas.width;
      var height = _this.canvas.width / ratio;
      ctx.drawImage(media, 0, 0, width, height);

      if (!media.paused && !media.ended && !force) {
        setTimeout(_this.drawVideo, 1000 / 24);
      }

      if (!force && _this.drawCallback) _this.drawCallback();
    });

    _defineProperty(this, "onPlayPauseHandler", function () {
      if (_this.media.paused) {
        _this.media.play();
      } else _this.media.pause();
    });

    _defineProperty(this, "destroy", function () {
      _this.media.removeEventListener('play', _this.playListener, false);

      if (!_this.media.paused) _this.media.pause();

      _this.media.remove();

      delete _this.media;
    });

    this.canvas = canvas;
    this.ctx = _ctx;
    this.media = _media;
    this.ratio = _ratio;
    this.drawCallback = drawCallback;

    this.playListener = function () {
      return _this.drawVideo();
    };

    _media.addEventListener('play', this.playListener, false);
  };

  var DrawTools =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(DrawTools, _React$Component);

    function DrawTools(props) {
      var _this;

      _classCallCheck(this, DrawTools);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawTools).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "buttonStyle", {
        marginRight: 24,
        fontSize: 18,
        color: '#fff',
        fontWeight: 'bold',
        padding: 10,
        border: '2px solid #fff',
        borderRadius: 4,
        fontFamily: 'Arial, Helvetica, sans-serif',
        cursor: 'pointer',
        transition: '300ms ease all'
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onColorPicked", function (color) {
        return _this.props.onColorChange(color);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "togglePicker", function () {
        _this.setState(function (state) {
          return {
            showPicker: !state.showPicker
          };
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderToolsItem", function (item, key) {
        return React.createElement("div", {
          style: _this.buttonStyle,
          onClick: item.onClick,
          key: key,
          className: "tools-item"
        }, item.name);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleOpen", function () {
        _this.setState(function (state) {
          return {
            opened: !state.opened
          };
        });
      });

      var onToolsChange = props.onToolsChange,
          onUndo = props.onUndo,
          onClear = props.onClear,
          onSave = props.onSave,
          onClose = props.onClose;
      _this.state = {
        opened: false,
        showPicker: false
      };
      _this.toolsItems = [{
        name: 'Pencil',
        onClick: function onClick() {
          return onToolsChange(0);
        }
      }, {
        name: 'Line',
        onClick: function onClick() {
          return onToolsChange(1);
        }
      }, {
        name: 'Arrow',
        onClick: function onClick() {
          return onToolsChange(2);
        }
      }, {
        name: 'Elipse',
        onClick: function onClick() {
          return onToolsChange(3);
        }
      }, {
        name: 'Rectangle',
        onClick: function onClick() {
          return onToolsChange(4);
        }
      }, {
        name: 'Text',
        onClick: function onClick() {
          return onToolsChange(5);
        }
      }, {
        name: 'Color',
        onClick: _this.togglePicker
      }, {
        name: 'Undo',
        onClick: onUndo
      }, {
        name: 'Clear',
        onClick: onClear
      }, {
        name: 'Save',
        onClick: onSave
      }, {
        name: 'Close',
        onClick: function onClick() {
          _this.toggleOpen();

          if (onClose) onClose();
        }
      }];
      return _this;
    }

    _createClass(DrawTools, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var ColorPicker = this.props.picker;
        return React.createElement("div", {
          className: "canvas-painter-tools",
          style: {
            display: 'flex',
            background: '#888',
            padding: 12
          }
        }, !this.state.opened && React.createElement("div", {
          style: this.buttonStyle,
          className: "tools-item",
          onClick: this.toggleOpen
        }, "Open Tools"), this.state.opened && React.createElement(React.Fragment, null, this.toolsItems.map(function (item, i) {
          return _this2.renderToolsItem(item, i);
        }), this.state.showPicker && React.createElement(ColorPicker, {
          style: {
            position: 'absolute',
            top: 70,
            left: 50
          },
          onChangeComplete: this.onColorPicked
        })));
      }
    }]);

    return DrawTools;
  }(React.Component);

  var Text = function Text(x, y, text, color, textSize) {
    _classCallCheck(this, Text);

    this.x = x;
    this.y = y;
    this.text = text;
    this.color = color;
    this.textSize = textSize;
  };

  var Tools = Object.freeze({
    Pencil: 0,
    Line: 1,
    Arrow: 2,
    Elipse: 3,
    Rectangle: 4,
    Text: 5,
    Shape: 6
  });

  var Shape = function Shape(x1, y1, x2, y2, color, type) {
    _classCallCheck(this, Shape);

    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    this.color = color;
    this.type = type;
  };

  var Path = function Path(data) {
    _classCallCheck(this, Path);

    this.data = data;
  };

  var CanvasController = function CanvasController() {
    var _this = this;

    _classCallCheck(this, CanvasController);

    _defineProperty(this, "init", function (data) {
      _this.canvasPainter = data.canvasPainter;
      _this.canvas = data.canvas;
      _this.ctx = data.ctx;
      _this.brushColor = data.brushColor;
      _this.brushSize = data.brushSize;
      _this.textSize = data.textSize;
      _this.width = data.width;
      _this.height = data.height;
      _this.forceRedraw = data.forceRedraw;
      _this.tool = Tools.Pencil;
      _this.isMouseDown = false;
      _this.hasInput = false;
      _this.textPosition = {};
      _this.startDrawIdx = [];
      _this.pathsArray = [];
      _this.shapesArray = [];
      _this.textsArray = [];
      _this.history = [];
    });

    _defineProperty(this, "onRedraw", function () {
      _this.pathsArray.forEach(function (path) {
        return path.data.forEach(function (item) {
          return _this.drawPath(item);
        });
      });

      _this.shapesArray.forEach(function (shape) {
        return _this.drawShape(shape);
      });

      _this.textsArray.forEach(function (text) {
        return _this.drawText(text);
      });

      if (_this.isMouseDown && _this.tool === Tools.Shape) {
        _this.drawCurrentShape();
      }
    });

    _defineProperty(this, "onMouseUp", function (e) {
      _this.isMouseDown = false;
      var shapes = [Tools.Line, Tools.Arrow, Tools.Elipse, Tools.Rectangle];

      if (lodash.includes(shapes, _this.tool)) {
        var _this$getMousePos = _this.getMousePos(e),
            x = _this$getMousePos.x,
            y = _this$getMousePos.y;

        var shape = new Shape(_this.shapeStart.x, _this.shapeStart.y, x, y, _this.brushColor, _this.tool);

        _this.shapesArray.push(shape);

        _this.history.push(Tools.Shape);
      }
    });

    _defineProperty(this, "onMouseDown", function (e) {
      if (_this.tool === Tools.Pencil) {
        _this.drawPathStart(e);

        return;
      }

      if (_this.tool === Tools.Text && !_this.hasInput) {
        _this.textPosition = _this.getMousePos(e);

        _this.addTextInput(_this.textPosition);

        return;
      }

      _this.drawShapeStart(e);
    });

    _defineProperty(this, "onMouseMove", function (e) {
      if (!_this.ctx || !_this.isMouseDown) return;

      if (_this.tool === Tools.Pencil) {
        _this.drawPaths(e);

        return;
      }

      _this.drawCurrentShape(e);
    });

    _defineProperty(this, "getMousePos", function (e) {
      var rect = _this.canvas.getBoundingClientRect();

      var clientX = e.clientX;
      var clientY = e.clientY;

      if (e.touches && e.touches.length > 0) {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
      }

      return {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    });

    _defineProperty(this, "addTextInput", function (_ref) {
      var x = _ref.x,
          y = _ref.y;
      var parent = _this.canvas.parentNode;
      var input = document.createElement('input');
      parent.appendChild(input);
      input.style.position = 'absolute';
      input.style.outline = 'none';
      input.style.border = 'none';
      input.style.background = 'transparent';
      input.style.fontWeight = 'bold';
      input.style.zIndex = '1000';
      input.style.borderBottom = "2px solid ".concat(_this.brushColor);
      input.style.fontSize = _this.textSize;
      input.style.color = _this.brushColor;
      input.style.left = "".concat(x, "px");
      input.style.top = "".concat(y + _this.textSize, "px");
      input.autofocus = true;
      input.onkeydown = _this.handleTextEnter;
      input.focus();
      _this.hasInput = true;
    });

    _defineProperty(this, "handleTextEnter", function (e) {
      var keyCode = e.keyCode;

      if (keyCode === 13) {
        var _this$textPosition = _this.textPosition,
            x = _this$textPosition.x,
            y = _this$textPosition.y;
        var text = new Text(x, y, e.target.value, _this.brushColor, _this.textSize);
        e.target.remove();
        _this.hasInput = false;

        _this.textsArray.push(text);

        _this.history.push(Tools.Text);

        _this.drawText(text);
      }
    });

    _defineProperty(this, "drawText", function (content) {
      var ctx = _this.ctx;
      var x = content.x,
          y = content.y,
          text = content.text,
          color = content.color,
          textSize = content.textSize;
      ctx.textBaseline = 'top';
      ctx.textAlign = 'left';
      ctx.fillStyle = color;
      ctx.font = "".concat(textSize - 2, "px Arial");
      ctx.fillText(text, x, y - textSize - 4);
    });

    _defineProperty(this, "drawPathStart", function (e) {
      _this.isMouseDown = true;

      _this.startDrawIdx.push(_this.pathsArray.length);

      var _this$getMousePos2 = _this.getMousePos(e),
          x = _this$getMousePos2.x,
          y = _this$getMousePos2.y;

      _this.x = x;
      _this.y = y;

      _this.drawPaths(e, true);
    });

    _defineProperty(this, "drawPaths", function (e, isNew) {
      var _this$getMousePos3 = _this.getMousePos(e),
          x = _this$getMousePos3.x,
          y = _this$getMousePos3.y;

      var newX = x + 1;
      var newY = y + 1;
      var path = {
        color: _this.brushColor,
        size: _this.brushSize,
        startX: _this.x,
        startY: _this.y,
        endX: newX,
        endY: newY
      };

      _this.drawPath(path);

      if (isNew) {
        var newData = [path];

        _this.pathsArray.push(new Path(newData));

        _this.history.push(Tools.Pencil);
      }

      _this.pathsArray[_this.pathsArray.length - 1].data.push(path);

      _this.x = newX;
      _this.y = newY;
    });

    _defineProperty(this, "drawPath", function (path) {
      _this.ctx.strokeStyle = path.color;
      _this.ctx.lineWidth = path.size;
      _this.ctx.lineCap = 'round';

      _this.ctx.beginPath();

      _this.ctx.moveTo(path.startX, path.startY);

      _this.ctx.lineTo(path.endX, path.endY);

      _this.ctx.stroke();
    });

    _defineProperty(this, "drawShapeStart", function (e) {
      _this.isMouseDown = true;
      _this.shapeStart = _this.getMousePos(e);
    });

    _defineProperty(this, "drawCurrentShape", function (e) {
      if (e) {
        var _this$getMousePos4 = _this.getMousePos(e),
            x = _this$getMousePos4.x,
            y = _this$getMousePos4.y;

        var shape = new Shape(_this.shapeStart.x, _this.shapeStart.y, x, y, _this.brushColor, _this.tool);
        _this.currentShape = shape;

        _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);

        _this.forceRedraw();

        _this.canvasPainter.redraw();

        _this.drawShape(shape);
      } else if (_this.currentShape) {
        _this.drawShape(_this.currentShape);
      }
    });

    _defineProperty(this, "drawShape", function (shape) {
      var ctx = _this.ctx;
      var x1 = shape.x1,
          y1 = shape.y1,
          x2 = shape.x2,
          y2 = shape.y2,
          color = shape.color,
          type = shape.type;
      ctx.beginPath();
      ctx.strokeStyle = color;
      ctx.lineWidth = _this.brushSize;
      ctx.lineJoin = 'round';
      ctx.lineCap = 'round';

      switch (type) {
        case Tools.Arrow:
        case Tools.Line:
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          break;

        case Tools.Elipse:
          _this.drawElipse(shape);

          break;

        case Tools.Rectangle:
          ctx.rect(x1, y1, x2 - x1, y2 - y1);
          break;

        default:
      }

      ctx.stroke();
      if (type === Tools.Arrow) _this.drawArrowTip(shape);
    });

    _defineProperty(this, "drawArrowTip", function (line) {
      var ctx = _this.ctx;
      var x1 = line.x1,
          y1 = line.y1,
          x2 = line.x2,
          y2 = line.y2;
      var tipLength = 10;
      var angle = Math.atan2(y2 - y1, x2 - x1);
      ctx.beginPath();
      ctx.moveTo(x2, y2);
      ctx.lineTo(x2 - tipLength * Math.cos(angle - Math.PI / 6), y2 - tipLength * Math.sin(angle - Math.PI / 6));
      ctx.moveTo(x2, y2);
      ctx.lineTo(x2 - tipLength * Math.cos(angle + Math.PI / 6), y2 - tipLength * Math.sin(angle + Math.PI / 6));
      ctx.stroke();
    });

    _defineProperty(this, "drawElipse", function (_ref2) {
      var x1 = _ref2.x1,
          y1 = _ref2.y1,
          x2 = _ref2.x2,
          y2 = _ref2.y2;
      var ctx = _this.ctx;
      var radiusX = (x2 - x1) * 0.5;
      var radiusY = (y2 - y1) * 0.5;
      var centerX = x1 + radiusX;
      var centerY = y1 + radiusY;
      var step = 0.01;
      var i = step;
      var pi2 = Math.PI * 2 - step;
      ctx.moveTo(centerX + radiusX * Math.cos(0), centerY + radiusY * Math.sin(0));

      for (; i < pi2; i += step) {
        ctx.lineTo(centerX + radiusX * Math.cos(i), centerY + radiusY * Math.sin(i));
      }
    });

    _defineProperty(this, "onUndo", function () {
      switch (_this.history.pop()) {
        case Tools.Text:
          _this.textsArray.pop();

          break;

        case Tools.Pencil:
          _this.pathsArray.pop();

          break;

        case Tools.Shape:
          _this.shapesArray.pop();

          break;

        default:
      }

      _this.canvasPainter.redraw();
    });

    _defineProperty(this, "onClear", function () {
      _this.pathsArray = [];
      _this.shapesArray = [];
      _this.textsArray = [];

      _this.forceRedraw();

      _this.canvasPainter.redraw();
    });

    _defineProperty(this, "onSave", function () {
      var image = _this.canvas.toDataURL('image/png');

      var a = document.createElement('a');
      a.href = image;
      a.download = "".concat(new Date().getTime(), ".png");
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    });

    _defineProperty(this, "onToolsChange", function (id) {
      _this.tool = id;
    });

    _defineProperty(this, "onColorChange", function (color) {
      _this.brushColor = color.hex;

      _this.canvasPainter.redraw();
    });
  };

  var CanvasPainter =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(CanvasPainter, _React$Component);

    function CanvasPainter(props) {
      var _this;

      _classCallCheck(this, CanvasPainter);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CanvasPainter).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeSize", function () {
        var ratio = _this.state.ratio;

        _this.setState({
          width: _this.canvas.offsetWidth,
          height: _this.canvas.offsetWidth / ratio
        });

        var parent = _this.canvas.parentNode;
        setTimeout(function () {
          _this.setState({
            width: parent.offsetWidth,
            height: parent.offsetWidth / ratio
          });

          _this.redraw();

          _this.forceUpdate();
        }, 100);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "redraw", function () {
        var _this$props = _this.props,
            beforeRender = _this$props.beforeRender,
            afterRender = _this$props.afterRender;
        if (beforeRender) beforeRender();

        _this.controller.onRedraw();

        if (afterRender) afterRender();
      });

      _this.controller = new CanvasController();
      _this.state = {
        ratio: props.ratio,
        width: props.width,
        height: props.height
      };
      return _this;
    }

    _createClass(CanvasPainter, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.controller.init(_objectSpread({
          canvas: this.canvas,
          ctx: this.ctx,
          canvasPainter: this
        }, this.props));
        this.changeSize();
        window.addEventListener('resize', this.changeSize);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this.changeSize);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$state = this.state,
            width = _this$state.width,
            height = _this$state.height;
        var _this$props2 = this.props,
            style = _this$props2.style,
            children = _this$props2.children;
        return React.createElement("div", {
          className: "canvas-painter"
        }, React.createElement(DrawTools, {
          onUndo: this.controller.onUndo,
          onClear: this.controller.onClear,
          onSave: this.controller.onSave,
          onToolsChange: this.controller.onToolsChange,
          onColorChange: this.controller.onColorChange
        }), React.createElement("canvas", {
          ref: function ref(canvas) {
            if (canvas) {
              _this2.canvas = canvas;
              _this2.ctx = canvas.getContext('2d');
            }
          },
          style: _objectSpread({
            background: '#000',
            display: 'block',
            touchAction: 'none'
          }, style),
          width: width,
          height: height,
          onClick: function onClick() {
            return false;
          },
          onMouseDown: this.controller.onMouseDown,
          onMouseUp: this.controller.onMouseUp,
          onMouseMove: this.controller.onMouseMove,
          onMouseOut: function onMouseOut() {
            _this2.controller.isMouseDown = false;
          },
          onTouchStart: this.controller.onMouseDown,
          onTouchMove: this.controller.onMouseMove,
          onTouchEnd: this.controller.onMouseUp,
          onTouchCancel: function onTouchCancel() {
            _this2.controller.isMouseDown = false;
          }
        }), children);
      }
    }]);

    return CanvasPainter;
  }(React.Component);

  _defineProperty(CanvasPainter, "defaultProps", {
    width: 400,
    height: 400,
    ratio: 16 / 9,
    brushColor: '#f33',
    brushSize: 10,
    textSize: 18
  });

  var PauseIcon = function PauseIcon(_ref) {
    var width = _ref.width,
        height = _ref.height,
        style = _ref.style;
    return React.createElement("svg", {
      width: width,
      height: height,
      style: style,
      viewBox: "0 0 1792 1792",
      xmlns: "http://www.w3.org/2000/svg"
    }, React.createElement("path", {
      d: "M1664 192v1408q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45v-1408q0-26 19-45t45-19h512q26 0 45 19t19 45zm-896 0v1408q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45v-1408q0-26 19-45t45-19h512q26 0 45 19t19 45z"
    }));
  };
  var PlayIcon = function PlayIcon(_ref2) {
    var width = _ref2.width,
        height = _ref2.height,
        style = _ref2.style;
    return React.createElement("svg", {
      width: width,
      height: height,
      style: style,
      viewBox: "0 0 1792 1792",
      xmlns: "http://www.w3.org/2000/svg"
    }, React.createElement("path", {
      d: "M1576 927l-1328 738q-23 13-39.5 3t-16.5-36v-1472q0-26 16.5-36t39.5 3l1328 738q23 13 23 31t-23 31z"
    }));
  };
  var MuteIcon = function MuteIcon(_ref3) {
    var width = _ref3.width,
        height = _ref3.height,
        style = _ref3.style;
    return React.createElement("svg", {
      width: width,
      height: height,
      style: style,
      viewBox: "0 0 1792 1792",
      xmlns: "http://www.w3.org/2000/svg"
    }, React.createElement("path", {
      d: "M832 352v1088q0 26-19 45t-45 19-45-19l-333-333h-262q-26 0-45-19t-19-45v-384q0-26 19-45t45-19h262l333-333q19-19 45-19t45 19 19 45zm384 544q0 76-42.5 141.5t-112.5 93.5q-10 5-25 5-26 0-45-18.5t-19-45.5q0-21 12-35.5t29-25 34-23 29-36 12-56.5-12-56.5-29-36-34-23-29-25-12-35.5q0-27 19-45.5t45-18.5q15 0 25 5 70 27 112.5 93t42.5 142zm256 0q0 153-85 282.5t-225 188.5q-13 5-25 5-27 0-46-19t-19-45q0-39 39-59 56-29 76-44 74-54 115.5-135.5t41.5-173.5-41.5-173.5-115.5-135.5q-20-15-76-44-39-20-39-59 0-26 19-45t45-19q13 0 26 5 140 59 225 188.5t85 282.5zm256 0q0 230-127 422.5t-338 283.5q-13 5-26 5-26 0-45-19t-19-45q0-36 39-59 7-4 22.5-10.5t22.5-10.5q46-25 82-51 123-91 192-227t69-289-69-289-192-227q-36-26-82-51-7-4-22.5-10.5t-22.5-10.5q-39-23-39-59 0-26 19-45t45-19q13 0 26 5 211 91 338 283.5t127 422.5z"
    }));
  };
  var UnMuteIcon = function UnMuteIcon(_ref4) {
    var width = _ref4.width,
        height = _ref4.height,
        style = _ref4.style;
    return React.createElement("svg", {
      width: width,
      height: height,
      style: style,
      viewBox: "0 0 1792 1792",
      xmlns: "http://www.w3.org/2000/svg"
    }, React.createElement("path", {
      d: "M1280 352v1088q0 26-19 45t-45 19-45-19l-333-333h-262q-26 0-45-19t-19-45v-384q0-26 19-45t45-19h262l333-333q19-19 45-19t45 19 19 45z"
    }));
  };

  var Playback = function Playback(_ref) {
    var playbackHandler = _ref.playbackHandler,
        paused = _ref.paused;
    var styles = {
      height: '40px',
      border: 'none',
      backgroundColor: 'inherit',
      cursor: 'pointer'
    };
    var buttonStyles = {
      width: '20px',
      height: '20px',
      margin: '10px 10'
    };
    return React.createElement("div", {
      onClick: playbackHandler,
      style: styles
    }, paused ? React.createElement(PlayIcon, {
      style: buttonStyles
    }) : React.createElement(PauseIcon, {
      style: buttonStyles
    }));
  };

  var Time = function Time(_ref) {
    var time = _ref.time;
    var styles = {
      height: '40px',
      lineHeight: '40px',
      fontSize: '1rem',
      fontFamily: 'Arial',
      width: 230
    };
    return React.createElement("div", {
      style: styles
    }, time);
  };

  var Progress = function Progress(_ref) {
    var value = _ref.value,
        progressClickHandler = _ref.progressClickHandler;
    var styles = {
      width: 'calc(100% - 230px)',
      margin: '0 20px',
      height: '40px',
      cursor: 'pointer'
    };
    return React.createElement("progress", {
      onClick: progressClickHandler,
      min: "0",
      max: "100",
      value: value,
      style: styles
    });
  };

  var Volume = function Volume(_ref) {
    var _progressStyles;

    var volumeHandler = _ref.volumeHandler,
        muteHandler = _ref.muteHandler,
        volume = _ref.volume,
        muted = _ref.muted;
    var styles = {
      height: '40px',
      border: 'none',
      backgroundColor: 'inherit',
      cursor: 'pointer'
    };
    var iconStyles = {
      width: '20px',
      height: '20px',
      margin: '10px 10'
    };
    var progressStyles = (_progressStyles = {
      width: 'calc(100% - 40px)',
      margin: '0 20px',
      height: '40px',
      cursor: 'pointer'
    }, _defineProperty(_progressStyles, "width", 'calc(30% - 40px)'), _defineProperty(_progressStyles, "opacity", muted ? 0.2 : 1), _progressStyles);
    return React.createElement(React.Fragment, null, React.createElement("div", {
      onClick: muteHandler,
      style: styles
    }, muted ? React.createElement(UnMuteIcon, {
      style: iconStyles
    }) : React.createElement(MuteIcon, {
      style: iconStyles
    })), React.createElement("progress", {
      onClick: volumeHandler,
      min: "0",
      max: "1",
      value: volume,
      style: progressStyles
    }));
  };

  var Controls =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(Controls, _React$Component);

    function Controls(props) {
      var _this;

      _classCallCheck(this, Controls);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Controls).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "timeUpdateHandler", function () {
        var media = _this.props.media;
        var progress = media.currentTime ? media.currentTime / media.duration * 100 : 0;

        _this.setState({
          progress: progress,
          timeString: _this.getTimeString(media)
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "playbackListener", function () {
        var media = _this.props.media;

        _this.setState({
          paused: media.paused
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "playbackHandler", function () {
        var media = _this.props.media;

        if (media.paused) {
          media.play();
        } else {
          media.pause();
        }

        _this.setState({
          paused: !media.paused
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "progressClickHandler", function (e) {
        var percent = e.nativeEvent.offsetX / e.target.offsetWidth;

        _this.changeMediaProgress(percent);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeMediaProgress", function (percent) {
        var media = _this.props.media;
        media.currentTime = percent * media.duration;

        if (media.paused || media.ended) {
          media.play().then(function () {
            return media.pause();
          });
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "muteHandler", function () {
        var media = _this.props.media;
        media.muted = !media.muted;

        _this.setState({
          muted: media.muted
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "volumeHandler", function (e) {
        var media = _this.props.media;
        media.volume = e.nativeEvent.offsetX / e.target.offsetWidth;

        _this.setState({
          volume: media.volume
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTimeString", function (media) {
        var current = _this.secondsToHms(media.currentTime);

        var duration = _this.secondsToHms(media.duration);

        return "".concat(current, " / ").concat(duration);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "secondsToHms", function (seconds) {
        var numberSeconds = Number(seconds);
        if (!seconds) return '00:00:00';
        var h = Math.floor(numberSeconds / 3600);
        var m = Math.floor(numberSeconds % 3600 / 60);
        var s = Math.floor(numberSeconds % 3600 % 60);
        return "".concat(h < 10 ? "0".concat(h) : h, ":").concat(m < 10 ? "0".concat(m) : m, ":").concat(s < 10 ? "0".concat(s) : s);
      });

      _this.state = {
        paused: true,
        muted: false,
        volume: props.media.volume,
        timeString: _this.getTimeString(props.media),
        progress: 0
      };
      return _this;
    }

    _createClass(Controls, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var media = this.props.media;
        media.addEventListener('play', this.playbackListener, false);
        media.addEventListener('pause', this.playbackListener, false);
        media.addEventListener('timeupdate', this.timeUpdateHandler, false);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var media = this.props.media;
        media.removeEventListener('play', this.playbackListener, false);
        media.removeEventListener('pause', this.playbackListener, false);
        media.removeEventListener('timeupdate', this.timeUpdateHandler, false);
      }
    }, {
      key: "render",
      value: function render() {
        var showProgressBar = this.props.showProgressBar;
        var _this$state = this.state,
            paused = _this$state.paused,
            timeString = _this$state.timeString,
            progress = _this$state.progress,
            volume = _this$state.volume,
            muted = _this$state.muted;
        var styles = {
          display: 'flex',
          backgroundColor: '#d0d0d0',
          position: 'relative',
          top: '-4px',
          width: '100%',
          height: '40px',
          justifyContent: 'flex-start'
        };
        return React.createElement("div", {
          style: styles
        }, React.createElement(Playback, {
          paused: paused,
          playbackHandler: this.playbackHandler
        }), React.createElement(Time, {
          time: timeString
        }), showProgressBar && React.createElement(Progress, {
          value: progress,
          progressClickHandler: this.progressClickHandler
        }), React.createElement(Volume, {
          volumeHandler: this.volumeHandler,
          muteHandler: this.muteHandler,
          volume: volume,
          muted: muted
        }));
      }
    }]);

    return Controls;
  }(React.Component);

  _defineProperty(Controls, "defaultProps", {
    showProgressBar: true
  });

  var VideoEditor =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(VideoEditor, _React$Component);

    function VideoEditor() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, VideoEditor);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VideoEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "canvasPainter", React.createRef());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "playerDrawCallback", function () {
        return _this.canvasPainter.redraw();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "forceRedraw", function () {
        return _this.videPlayer.drawVideo(true);
      });

      return _this;
    }

    _createClass(VideoEditor, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.videPlayer = new VideoPlayer(this.canvasPainter.canvas, this.canvasPainter.ctx, this.props.media, this.props.ratio, this.playerDrawCallback);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.videPlayer.destroy();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var media = this.props.media;
        return React.createElement("div", {
          style: {
            width: '100%'
          }
        }, React.createElement(CanvasPainter, {
          forceRedraw: this.forceRedraw,
          ref: function ref(_ref) {
            _this2.canvasPainter = _ref;
          }
        }), media && React.createElement(Controls, {
          media: media
        }));
      }
    }]);

    return VideoEditor;
  }(React.Component);

  var ImageEditor =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(ImageEditor, _React$Component);

    function ImageEditor() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ImageEditor);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "canvasPainter", React.createRef());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderImage", function () {
        if (!_this.canvasPainter) return;

        var _ref = _this.canvasPainter || {},
            canvas = _ref.canvas,
            ctx = _ref.ctx;

        var _this$props = _this.props,
            media = _this$props.media,
            ratio = _this$props.ratio;

        if (canvas && media) {
          ctx.drawImage(media, 0, 0, canvas.width, canvas.width / ratio);
        }
      });

      return _this;
    }

    _createClass(ImageEditor, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.renderImage();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var media = this.props.media;
        return media ? React.createElement("div", {
          style: {
            width: '100%'
          }
        }, React.createElement(CanvasPainter, {
          forceRedraw: this.renderImage,
          beforeRender: this.renderImage,
          ref: function ref(_ref2) {
            _this2.canvasPainter = _ref2;
          }
        })) : null;
      }
    }]);

    return ImageEditor;
  }(React.Component);

  var AudioChart =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(AudioChart, _React$Component);

    function AudioChart(props) {
      var _this;

      _classCallCheck(this, AudioChart);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioChart).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeSize", function () {
        _this.setState(function (state) {
          return {
            width: _this.canvas.current.offsetWidth,
            height: _this.canvas.current.offsetWidth / state.ratio
          };
        });

        var parent = _this.canvas.current.parentNode;
        setTimeout(function () {
          if (parent) {
            _this.setState(function (state) {
              return {
                width: parent.offsetWidth,
                height: parent.offsetWidth / state.ratio
              };
            });
          }

          if (_this.state.data) {
            _this.drawData(_this.state.data);
          }

          _this.forceUpdate();
        }, 300);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "drawData", function (buff) {
        var _this$state = _this.state,
            width = _this$state.width,
            height = _this$state.height,
            stepHeight = _this$state.stepHeight,
            maxSteps = _this$state.maxSteps;

        var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),
            canvas = _assertThisInitialize.canvas;

        var ctx = canvas.current.getContext('2d');
        var leftChannel = buff.getChannelData(0); // reduce count of steps entries

        if (leftChannel.length > maxSteps * 2) {
          var stepReducer = ~~(leftChannel.length / maxSteps);
          leftChannel = leftChannel.filter(function (_, i) {
            return i % stepReducer === 0;
          });
        }

        ctx.save();
        ctx.fillStyle = '#000';
        ctx.lineWidth = 1;
        ctx.fillRect(0, 0, width, height);
        ctx.strokeStyle = '#228';
        ctx.globalCompositeOperation = 'lighter';
        ctx.translate(0, height / 2);
        ctx.globalAlpha = 0.6;
        leftChannel.forEach(function (item, i) {
          var x = Math.floor(width * i / leftChannel.length);
          var y = item * height / (1 / stepHeight * 0.5);
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x + 1, y);
          ctx.stroke();
        });
        ctx.restore();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "drawProgress", function (progress) {
        var _this$state2 = _this.state,
            width = _this$state2.width,
            height = _this$state2.height;

        var _assertThisInitialize2 = _assertThisInitialized(_assertThisInitialized(_this)),
            canvas = _assertThisInitialize2.canvas;

        var ctx = canvas.current.getContext('2d');
        ctx.font = "".concat(height / 20, "px Arial");
        ctx.fillStyle = '#fff';
        ctx.textAlign = 'center';
        ctx.fillText(progress, width / 2, height / 20);
        ctx.strokeStyle = '#fff';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(width * progress / 100, 0);
        ctx.lineTo(width * progress / 100, height);
        ctx.stroke();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mouseDownHandler", function (e) {
        var percent = e.nativeEvent.offsetX / e.target.offsetWidth;

        _this.props.progressClickHandler(percent);
      });

      _this.state = {
        width: props.width,
        height: props.width / props.ratio,
        stepHeight: props.stepHeight,
        data: null,
        maxSteps: props.maxSteps,
        ratio: props.ratio
      };
      _this.canvas = React.createRef();
      return _this;
    }

    _createClass(AudioChart, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        var audioContext = new AudioContext();

        var onDecodeError = function onDecodeError() {
          console.log('error while decoding your file.');
        };

        var loadMusic = function loadMusic(url) {
          var req = new XMLHttpRequest();
          req.open('GET', url, true);
          req.responseType = 'arraybuffer';

          req.onreadystatechange = function () {
            if (req.readyState === 4) {
              if (req.status === 200) {
                audioContext.decodeAudioData(req.response, function (buffer) {
                  _this2.setState({
                    data: buffer
                  });

                  _this2.drawData(buffer);
                }, onDecodeError);
              } else {
                console.log('error during the load.Wrong url or cross origin issue');
              }
            }
          };

          req.send();
        };

        loadMusic(this.props.src);
        this.changeSize();
        window.addEventListener('resize', this.changeSize);
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        if (nextProps.progress !== this.props.progress) {
          if (this.state.data) {
            this.drawData(this.state.data);
            this.drawProgress(nextProps.progress);
          }
        }

        return nextProps;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this.changeSize);
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement("canvas", {
          width: this.state.width,
          height: this.state.height,
          onMouseDown: this.mouseDownHandler,
          ref: this.canvas,
          style: _objectSpread({
            display: 'block',
            touchAction: 'none'
          }, this.props.style)
        });
      }
    }]);

    return AudioChart;
  }(React.Component);

  _defineProperty(AudioChart, "defaultProps", {
    width: 800,
    ratio: 3 / 1,
    stepHeight: 4,
    maxSteps: 8000
  });

  var listStyles = {
    minHeight: 302,
    minWidth: 500,
    padding: 20,
    border: '1px solid #ccc',
    backgroundColor: '#fff'
  };
  var itemStyles = {
    minHeight: 60,
    color: '#555',
    fontSize: 20,
    marginBottom: 20,
    backgroundColor: '#fff',
    border: '1px solid #aaa',
    borderRadius: 4,
    padding: 8,
    cursor: 'pointer'
  };

  var CommentsList = function CommentsList(props) {
    var comments = props.comments,
        goToTimeMark = props.goToTimeMark;
    return React.createElement("div", {
      style: listStyles
    }, React.createElement("h3", {
      style: {
        marginLeft: '-10px',
        marginTop: '-10px',
        color: '#666'
      }
    }, "Comments"), comments.map(function (comment) {
      return comment && comment.text ? React.createElement("div", {
        style: itemStyles,
        onClick: function onClick() {
          return goToTimeMark(comment.progressMark);
        },
        key: "".concat(comment.id)
      }, comment.text) : null;
    }));
  };

  var AddCommentPopup =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(AddCommentPopup, _React$Component);

    function AddCommentPopup() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AddCommentPopup);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddCommentPopup)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        visible: false
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "showPopup", function () {
        return _this.setState({
          visible: true
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hidePopup", function () {
        return _this.setState({
          visible: false
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "confirmAction", function () {
        _this.hidePopup();

        _this.props.successCallback(_this.field.value);

        _this.field.value = '';
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancelAction", function () {
        _this.hidePopup();

        _this.props.cancelCallback();
      });

      return _this;
    }

    _createClass(AddCommentPopup, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var textareaContainerStyles = {
          width: '100%',
          height: 400,
          padding: 20
        };
        var textareaStyles = {
          width: '100%',
          height: '100%',
          backgroundColor: 'inherit',
          outline: 'none',
          padding: 15,
          fontSize: 20,
          color: '#555'
        };
        var butttonStyles = {
          width: '80px',
          height: '32px',
          fontSize: '14px',
          marginRight: 20
        };
        return React.createElement("div", {
          style: {
            color: '#000',
            padding: 20,
            border: '1px solid #888',
            borderRadius: 4,
            background: '#fff',
            width: 500,
            minHeight: 500,
            position: 'fixed',
            top: '20%',
            left: 'calc(50% - 200px)',
            display: this.state.visible ? 'block' : 'none'
          },
          className: "modal-block"
        }, React.createElement("div", {
          className: "modal-header"
        }, React.createElement("h4", null, "Add comment")), React.createElement("div", {
          className: "general-block-body"
        }, React.createElement("div", {
          style: textareaContainerStyles
        }, React.createElement("textarea", {
          style: textareaStyles,
          ref: function ref(_ref) {
            _this2.field = _ref;
          }
        })), React.createElement("div", {
          className: "modal-footer",
          style: {
            padding: 20
          }
        }, React.createElement("button", {
          style: butttonStyles,
          type: "button",
          className: "btn bottom-action double",
          onClick: this.cancelAction
        }, "Cancel"), React.createElement("button", {
          style: butttonStyles,
          type: "button",
          className: "btn bottom-action double",
          onClick: this.confirmAction
        }, "Add"))));
      }
    }]);

    return AddCommentPopup;
  }(React.Component);

  var AudioEditor =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(AudioEditor, _React$Component);

    function AudioEditor() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AudioEditor);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AudioEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        audio: null,
        progress: 0,
        comments: []
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "controlsRef", React.createRef());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "commentsModal", React.createRef());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "audioProgressHandler", function () {
        var audio = _this.state.audio;

        if (audio) {
          var progress = audio.currentTime ? audio.currentTime / audio.duration * 100 : 0;

          _this.setState({
            progress: progress
          });
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "progressClickHandler", function (percent) {
        if (_this.controlsRef) _this.controlsRef.changeMediaProgress(percent);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "showCommentsPopup", function () {
        return _this.commentsModal.showPopup();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "successCommentCallback", function (text) {
        var id = _this.state.comments.length ? _this.state.comments[_this.state.comments.length - 1].id : 0;
        var newComment = {
          id: id,
          text: text,
          progressMark: _this.state.progress / 100
        };

        _this.setState(function (prevState) {
          return {
            comments: _toConsumableArray(prevState.comments).concat([newComment])
          };
        });
      });

      return _this;
    }

    _createClass(AudioEditor, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var audio = document.createElement('audio');
        var extension = audio.src.substr(audio.src.lastIndexOf('.'));
        audio.src = this.props.src;
        audio.type = "audio/".concat(extension);

        var checkAudioState = function checkAudioState() {
          if (audio.readyState === 4) {
            _this2.setState({
              audio: audio
            });
          } else {
            setTimeout(checkAudioState, 100);
          }
        };

        window.addEventListener('load', checkAudioState, false);
        audio.load();
        audio.addEventListener('timeupdate', this.audioProgressHandler, false);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.audio.removeEventListener('timeupdate', this.audioProgressHandler, false);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props = this.props,
            enableComments = _this$props.enableComments,
            _this$props$showComme = _this$props.showCommentsList,
            showCommentsList = _this$props$showComme === void 0 ? true : _this$props$showComme;
        var addCommentButtonStyles = {
          width: '100%',
          height: '48px',
          fontSize: '16px',
          marginTop: '12px'
        };
        return React.createElement("div", {
          style: {
            width: '100%',
            display: 'flex'
          }
        }, React.createElement("div", null, React.createElement(AudioChart, _extends({
          progressClickHandler: this.progressClickHandler,
          progress: this.state.progress
        }, this.props)), this.state.audio && React.createElement(Controls, {
          showProgressBar: false,
          ref: function ref(_ref) {
            _this3.controlsRef = _ref;
          },
          media: this.state.audio
        })), enableComments && React.createElement("aside", {
          style: {
            padding: 20,
            paddingTop: 0
          }
        }, showCommentsList && React.createElement(CommentsList, {
          goToTimeMark: this.progressClickHandler,
          comments: this.state.comments
        }), React.createElement("button", {
          type: "button",
          style: addCommentButtonStyles,
          onClick: this.showCommentsPopup
        }, "Add comment"), React.createElement(AddCommentPopup, {
          successCallback: this.successCommentCallback,
          ref: function ref(_ref2) {
            _this3.commentsModal = _ref2;
          }
        })));
      }
    }]);

    return AudioEditor;
  }(React.Component);

  var TYPE_VIDEO = 'TYPE_VIDEO';
  var TYPE_AUDIO = 'TYPE_AUDIO';
  var TYPE_IMAGE = 'TYPE_IMAGE';

  var MediaEditor = function MediaEditor(props) {
    var type = props.type,
        media = props.media,
        src = props.src;

    if (!media && !src) {
      return null;
    }

    switch (type) {
      case TYPE_VIDEO:
        return React.createElement(VideoEditor, props);

      case TYPE_IMAGE:
        return React.createElement(ImageEditor, props);

      case TYPE_AUDIO:
        return React.createElement(AudioEditor, props);

      default:
        return null;
    }
  };

  exports.Editor = MediaEditor;
  exports.TYPE_VIDEO = TYPE_VIDEO;
  exports.TYPE_AUDIO = TYPE_AUDIO;
  exports.TYPE_IMAGE = TYPE_IMAGE;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
